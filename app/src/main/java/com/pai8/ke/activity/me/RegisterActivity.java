package com.pai8.ke.activity.me;import android.content.Intent;import android.os.CountDownTimer;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.gyf.immersionbar.ImmersionBar;import com.pai8.ke.R;import com.pai8.ke.api.Api;import com.pai8.ke.base.BaseActivity;import com.pai8.ke.base.retrofit.BaseObserver;import com.pai8.ke.base.retrofit.RxSchedulers;import com.pai8.ke.entity.req.CodeReq;import com.pai8.ke.entity.req.LoginReq;import com.pai8.ke.entity.resp.Getcode;import com.pai8.ke.entity.resp.ResLoginInfo;import com.pai8.ke.entity.resp.UserInfo;import com.pai8.ke.global.GlobalConstants;import com.pai8.ke.utils.NetWorkUtils;import com.pai8.ke.utils.PreferencesUtils;import java.io.IOException;import java.util.Map;import java.util.concurrent.ConcurrentSkipListMap;import java.util.regex.Matcher;import java.util.regex.Pattern;import butterknife.BindView;import butterknife.OnClick;import okhttp3.Call;import okhttp3.Response;public class RegisterActivity extends BaseActivity {    private static final String TAG = "RegisterActivity";    @BindView(R.id.et_user_name)    EditText etUserName;    @BindView(R.id.et_Message)    EditText etMessage;    @BindView(R.id.bt_get_code)    Button btGetCode;    @BindView(R.id.et_pwd)    EditText etPwd;    @BindView(R.id.et_pwdconfirm)    EditText etPwdconfirm;    @BindView(R.id.btn_register)    Button btnRegister;    @BindView(R.id.tv_registerpro)    TextView tvRegisterpro;    private String userPhone;    private String userPwd;    private String userPwdCon;    private String userMessage;    private NetWorkUtils netUtils;    @Override    public int getLayoutId() {        return R.layout.activity_register;    }    @Override    public void initView() {        //透明状态栏，字体深色        ImmersionBar.with(this)                .transparentStatusBar()                .statusBarDarkFont(true)                .init();    }    public void getData() {        userPhone = etUserName.getText().toString().trim();        userPwd = etPwd.getText().toString().trim();        userPwdCon = etPwdconfirm.getText().toString().trim();        userMessage = etMessage.getText().toString().trim();    }    @OnClick({R.id.bt_get_code, R.id.btn_register, R.id.tv_registerpro})    public void onViewClicked(View view) {        getData();        netUtils = NetWorkUtils.getInstance();        switch (view.getId()) {            case R.id.bt_get_code:                if (isPhone(userPhone)) {                    TimeCountDown timeCountDown = new TimeCountDown(120 * 1000, 1000);                    timeCountDown.start();                    Map<String, String> reqBody = new ConcurrentSkipListMap<>();                    reqBody.put("mobile", userPhone);                    netUtils.postDataAsynToNet(GlobalConstants.HTTP_URL_RELEASE + "public/getCode", reqBody, new                            NetWorkUtils.MyNetCall() {                                @Override                                public void success(Call call, Response response) throws IOException {                                    Log.d(TAG, "success: " + response.body().string());                                }                                @Override                                public void failed(Call call, IOException e) {                                }                            });                } else {                    toast("请输入正确的手机号");                }                break;            case R.id.btn_register:                if (!isPhone(userPhone)) {                    toast("请输入正确的手机号");                    return;                } else if (TextUtils.isEmpty(userMessage)) {                    toast("验证码不能为空");                    return;                } else if (TextUtils.isEmpty(userPwd) || userPwd.length() < 6) {                    toast("密码至少6位以上");                    return;                } else if (!userPwdCon.equals(userPwd)) {                    toast("两次输入的密码不一致");                    return;                } else {                    Map<String, String> reqBody = new ConcurrentSkipListMap<>();                    reqBody.put("mobile", userPhone);                    reqBody.put("code", userMessage);                    reqBody.put("pwd", userPwd);                    reqBody.put("repwd", userPwdCon);                    netUtils.postDataAsynToNet(GlobalConstants.HTTP_URL_RELEASE + "public/register", reqBody,                            new NetWorkUtils.MyNetCall() {                                @Override                                public void success(Call call, Response response) throws IOException {                                    ResLoginInfo<String> loginInfo = new Gson().fromJson(response.body().string(),                                            new TypeToken<ResLoginInfo<String>>() {                                            }.getType());                                    int code = loginInfo.getCode();                                    runOnUiThread(new Runnable() {                                        @Override                                        public void run() {                                            if (code == 0) {                                                toast(loginInfo.getMsg());                                            } else if (code == 1) {                                                Intent data = new Intent(RegisterActivity.this, LoginActivity.class);                                                data.putExtra("usename", userPhone);                                                setResult(RESULT_OK, data);                                                RegisterActivity.this.finish();                                            }                                        }                                    });                                }                                @Override                                public void failed(Call call, IOException e) {                                }                            });                }                break;            case R.id.tv_registerpro:                break;        }    }    public static boolean isPhone(String phone) {        String regex = "^((13[0-9])|(14[5,7,9])|(15([0-3]|[5-9]))|(166)|(17[0,1,3,5,6,7,8])|(18[0-9])|(19[8|9]))" +                "\\d{8}$";        if (phone.length() != 11) {            Log.d(TAG, "isPhone: 手机号应为11位数");            return false;        } else {            Pattern p = Pattern.compile(regex);            Matcher m = p.matcher(phone);            boolean isMatch = m.matches();            if (!isMatch) {                Log.d(TAG, "isPhone: 请填入正确的手机号");            }            return isMatch;        }    }    private void getVerifyCode(String phone) {        showLoadingDialog(null);        CodeReq codeReq = new CodeReq();        codeReq.setMobile(phone);        Api.getInstance().verifyCode(codeReq)                .compose(RxSchedulers.io_main())                .subscribe(new BaseObserver<Getcode>() {                    @Override                    protected void onSuccess(Getcode data) {                        dismissLoadingDialog();                        Log.d(TAG, "onSuccess: " + data);                    }                    @Override                    protected void onError(String msg, int errorCode) {                        super.onError(msg, errorCode);                    }                });    }    private void login(String userPhone, String VerityCode, String userPwd, String rePwd) {        showLoadingDialog(null);        LoginReq loginReq = new LoginReq();        loginReq.setMobile(userPhone);        loginReq.setVerifyCode("123456");        loginReq.setPwd(userPwd);        loginReq.setRePwd(rePwd);        Api.getInstance().login(loginReq)                .doOnSubscribe(disposable -> {                })                .compose(RxSchedulers.io_main())                .subscribe(new BaseObserver<UserInfo>() {                    @Override                    protected void onSuccess(UserInfo data) {                        dismissLoadingDialog();                    }                    @Override                    protected void onError(String msg, int errorCode) {                        super.onError(msg, errorCode);                    }                });    }    public class TimeCountDown extends CountDownTimer {        public TimeCountDown(long millisInFuture, long countDownInterval) {            super(millisInFuture, countDownInterval);        }        @Override        public void onTick(long millisUntilFinished) {            btGetCode.setClickable(false);            btGetCode.setText(millisUntilFinished / 1000 + "s后重新发送");        }        @Override        public void onFinish() {            btGetCode.setText("获取验证码");            btGetCode.setClickable(true);        }    }}